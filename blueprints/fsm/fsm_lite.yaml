blueprint: #https://www.home-assistant.io/docs/blueprint/schema/
  name: FSM Elettrodomestici - 4 stati
  description: Finite state machine with 4 states, transiction driven by power sensor
  domain: automation
  author: https://github.com/jumping2000/
  source_url: https://github.com/jumping2000/ha-templates/blob/main/blueprints/fsm/fsm_lite.yaml
  input:
    ###################################
    power_plug:
      name: Appliance Power Consumption
      description: |
        The power entity with the power absorption in Watts
        Sensore di potenza che misura i consumi dell'elettrodomestico
      selector:
        entity:
          domain: sensor
    energy_plug:
      name: Appliance Energy Consumption
      description: |
        Eenrgy sensor that monitors the enrgy absorbed by device 
        Sensore di energia che misura i consumi dell'elettrodomestico
      selector:
        entity:
          domain: sensor
    status:
      name: Device Status (input_select)
      description: |
        Entity input_select used to monitor the status
        Entità input_select per il cambio di stato dell'elettrodomestico
      selector:
        entity:
          domain: input_select
    status_sensor:
      name: Device Status (sensor)
      description: |
        Entity sensor used to show the status
        Entità sensor che pubblica il cambio di stato dell'elettrodomestico
      selector:
        entity:
          domain: sensor
    power_start:
      name: Starting power threshold
      description: |
        Power threshold above which we assume the appliance has started
        Inserisci la potenza che indica l'avvio dell'elettrodomestico
      default: 2
      selector:
        number:
          min: 0
          max: 30
          unit_of_measurement: Watt
    power_end:
      name: Finishing power threshold
      description: |
        Power threshold below which we assume the appliance has finished
        Inserisci la potenza che indica la fine del ciclo di lavaggio dell'elettrodomestico
      default: 2
      selector:
        number:
          min: 0
          max: 30
          unit_of_measurement: Watt
    power_warm_up:
      name: Power warm-up threshold
      description: |
        Power threshold above which we assume the appliance is in warm-up state
        Inserisci la potenza che indica la fase di riscaldamento dell'acqua dell'elettrodomestico
      default: 300
      selector:
        number:
          min: 100
          max: 1000
          unit_of_measurement: Watt
    power_cool_down:
      name: Potenza cool-down threshold
      description: |
        Power threshold above which we assume the appliance is in cool-down state
        Inserisci la potenza che indica la fase di fine riscaldamento
      default: 100
      selector:
        number:
          min: 10
          max: 200
          unit_of_measurement: Watt
    delay_finale:
      name: Last delay
      description: |
        Last delay before after which we are again in the initial state
        Tempo di attesa prima del ritorno allo stato iniziale
      default: 2
      selector:
        number:
          min: 0
          max: 30
          unit_of_measurement: minutes
    delay_start:
      name: First delay
      description: |
        Time spent in the starting state
        Tempo di attesa nello stato iniziale
      default: 1
      selector:
        number:
          min: 0
          max: 10
          unit_of_measurement: minutes
    delay_end:
      name: Tempo di attesa finale
      description: |
        Time spent in the finisching state
        Tempo di attesa per andare nello stato finale (Es. svuotare la lavatrice)
      default: 2
      selector:
        number:
          min: 0
          max: 10
          unit_of_measurement: minutes
    identificativo:
      name:  Appliance Name
      description: |
        Appliance Name
        Identificativo dell'oggetto dell'automazione (Es. Lavatrice).
      default: "Lavatrice"
      selector:
        text:
          type: text
#################################################
    mobile_device:
      name: Mobile Device
      description: |
        The device must run the official Home Assistant app to receive notifications.
        Nome dello smartphone
      default:
      selector:
        device:
          integration: mobile_app
    notify_telegram:
      name: Telegram notification service
      description: |
        Send notification with Telegram
        Servizio di notifica Telegram
      default:
      selector:
        text:
          type: text
    media_player_google:
      name: Media Player Google
      description: |
        Send TTS notification with Google Nest
        Media player per notifiche TTS Google
      default:
      selector:
        entity:
          domain: media_player
    media_player_alexa:
      name: Media Player Alexa
      description: |
        Send TTS notification with Alexa
        Media player per notifiche TTS Alexa
      default:
      selector:
        entity:
          domain: media_player
    dismiss:
      name: Dismiss Message
      description: |
        What to show as the actionable text in the notification.
        Testo da mostrare nella "actionable notification"
      default: Dismiss
    critical:
      name: (Optional) Critical Notification
      description: |
        Send as a critical notification to the mobile device.
        Invio di una notifica critica allo smartphone
      default:
      selector:
        boolean:
    interval:
      name: Notification Repeat Interval
      description: |
        How long to wait for acknowledgement before re-sending the notification. 
        Tempo di attesa tra una notifica e l'altra
      default: 5
      selector:
        number:
          max: 30
          min: 0
          unit_of_measurement: minutes
    alert_number:
      name: Notification Number
      description: |
        Total number of notifications sent
        Numero totale di notifiche inviate
      default: 3
      selector:
        number:
          max: 20
          min: 0
    ###################################
    automations_off:
      name: Automations Off ( Optional )
      description: |
        [OPTIONAL] Global Automations off, requires a 'input_boolean' { Toggle } Switch."
        Input boolean che abiita/disabilita l'automazione
      default:
      selector:
        entity:
          domain: input_boolean
          multiple: false
    debug_on:
      name: Debug On ( Optional )
      description: |
        System Logging 
        Log del blueprint
      default:
      selector:
        boolean:
#################################################
variables:
  power_sensor: !input power_plug
  energy_sensor: !input energy_plug
  #####################################
  power_start: !input power_start
  power_end: !input power_end
  power_rinse_up: !input power_warm_up
  power_rinse_down: !input power_cool_down
  delay_start: !input delay_start
  delay_end: !input delay_end
  delay_finale: !input delay_finale
  status: !input status
  status_sensor: !input status_sensor
  stato1: "{{state_attr(status,'options')[0]}}"
  stato2: "{{state_attr(status,'options')[1]}}"
  stato3: "{{state_attr(status,'options')[2]}}"
  stato4: "{{state_attr(status,'options')[3]}}"
  #####################################
  automations_off: !input automations_off
  debug_on: !input debug_on
  #####################################
  mobile_device: !input mobile_device
  notify_telegram: !input notify_telegram
  media_player_google: !input  media_player_google
  media_player_alexa: !input  media_player_alexa
  id: !input identificativo
  ack_mobile: "{{'ack-'+id}}"
  dismiss: !input dismiss
  critical: !input critical
  interval: !input interval
  alert_number: !input alert_number
#################################################
mode: queued
max: 20
max_exceeded: silent
trigger:
  - id: 'power_warm_up'
    platform: numeric_state
    entity_id: !input power_plug
    above: !input power_warm_up
    for:
      minutes: !input delay_start
  - id: 'power_end'
    platform: numeric_state
    entity_id: !input power_plug
    below: !input power_end
    for:
      minutes: !input delay_end
  - id: 'power_cool_down'
    platform: numeric_state
    entity_id: !input power_plug
    below: !input power_cool_down
    for:
      minutes: !input delay_start
  - id: 'power_start'
    platform: numeric_state
    entity_id: !input power_plug
    above: !input power_start
    for:
      minutes: !input delay_start
  - id: 'status_notification'
    platform: state
    entity_id: !input status_sensor
#### CONDITION ####
condition:
  - condition: template
    value_template:
      "{{ true if automations_off == None else is_state ( automations_off, 'off' ) }}"
#### ACTION #####
action:
  - alias: check first transcition FROM STATE1 to STATE 2
    if:
      condition: template
      value_template: "{{ trigger.from_state.state==stato1 and trigger.to_state.state==stato2  if trigger.from_state.state != None  else False}}"
    then:         
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.lavatrice_runtime
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.lavatrice_runtime
      - service: counter.increment
        target:
          entity_id: counter.cicli_lavaggio_lavatrice
      - service: input_number.set_value
        target:
          entity_id: input_number.lavatrice_energia_iniziale
        data:
          value: "{{ states(energy_sensor) }}"
    #####################################
  - choose:
    - alias: Idle --> Lavaggio
      conditions: "{{ trigger.id == 'power_start'}}"
      sequence:
        - choose:
          - conditions: "{{ states(status) == stato1 }}"
            sequence:
              - service: input_select.select_option
                target:
                  entity_id: "{{ status }}"
                data:
                  option: "{{ stato2 }}"
              - &debug-mode
                if:
                  - alias: "se DEBUG "
                    condition: template
                    value_template: "{{ is_state(debug_on, 'on') }}"
                then:
                  - service: system_log.write
                    data:
                      message: "Trigger_id:{{ trigger.id}}, vecchio stato: {{trigger.from_state.state}}, nuovo stato: {{ trigger.to_state.state }}"
                      level: info
    - alias: Risciacquo --> Svuotare
      conditions: "{{ trigger.id == 'power_end' }}"
      sequence:
        - choose:
          - conditions: "{{ states(status) == stato3 }}"
            sequence:
              - service: input_select.select_option
                target:
                  entity_id: "{{ status }}"
                data:
                  option: "{{ stato4 }}"
              - *debug-mode
    - alias: Lavaggio --> Risciacquo
      conditions: "{{ trigger.id == 'power_cool_down' }}"
      sequence:
        - choose:
          - conditions: "{{ states(status) == stato2 }}"
            sequence:
              - service: input_select.select_option
                target:
                  entity_id: "{{ status }}"
                data:
                  option: "{{ stato3 }}"
              - *debug-mode
    - alias: Risciacquo --> Lavaggio 
      conditions: "{{ trigger.id == 'power_warm_up' }}"
      sequence:
        - choose:
          - conditions: "{{ states(status) ==  stato3  }}"
            sequence:
              - service: input_select.select_option
                target:
                  entity_id: "{{ status }}"
                data:
                  option:  "{{ stato2 }}"
              - *debug-mode
    ###################################
    - alias: Gestione Notifiche
      conditions: "{{ trigger.id == 'status_notification' }}"
      sequence:
        - choose:
          - alias: Status -> Stato2 (Lavaggio) o Stato3 (Risciacquo)
            conditions: "{{ trigger.to_state.state in [stato2,stato3] }}"
            sequence:
              - variables:
                  message: "La {{id|lower}} è in fase di {{ trigger.to_state.state|lower }}"
              - &messaggio-stato 
                if:
                  condition: template
                  value_template: "{{ not not mobile_device }}"
                then:
                  - device_id: !input mobile_device #"{{ mobile_device }}"
                    domain: mobile_app
                    type: notify
                    title: "-- Attenzione --"
                    message: "{{ message }}"
                    data:
                      tag: "{{ id }}"
                      group: "{{ id }}"
                      # Android Specific
                      ttl: "{{ iif(critical, 0, 3600000) }}"
                      priority: "{{ iif(critical, 'high', 'normal') }}"
                      # iOS Specific
                      push:
                        interruption-level: "{{ iif(critical, 'critical', 'active') }}"
              - if:
                  condition: template
                  value_template: "{{ not not notify_telegram }}"
                then:
                  - service: "{{ notify_telegram }}"
                    data:
                      title: "-- Attenzione --"
                      message: "{{ message }}"
              - if:
                  condition: template
                  value_template: "{{ not not media_player_google}}"
                then:
                  - service: tts.google_translate_say
                    data:
                      message: "{{ message }}"
                      entity_id: "{{ media_player_google }}"
              - if:
                  condition: template
                  value_template: "{{ not not media_player_alexa }}"
                then:
                  - service: notify.alexa_media
                    data:
                      message: "{{ message }}"
                      target: "{{ media_player_alexa }}"
                      data:
                        type: announce  
          - alias: Status --> stato1
            conditions: "{{ trigger.to_state.state == stato1}}"
            sequence:
              - variables:
                  message: "{{ id }} nello stato iniziale"
              - *messaggio-stato 
          - alias: Status -> Stato4
            conditions: "{{ trigger.to_state.state == stato4 }}"
            sequence:
              - variables:
                  message: "{{ id }} finita."
              - parallel:
                  - alias: "Repeat the sequence UNTIL the conditions are true"
                    repeat:
                      sequence:
                        - if:
                            condition: template
                            value_template: "{{ not not mobile_device }}"
                          then:
                            - device_id: !input mobile_device #"{{ mobile_device }}"
                              domain: mobile_app
                              type: notify
                              title: "-- Attenzione --"
                              message: "{{ message }}"
                              data: 
                                tag: "{{ id }}"
                                group: "{{ id }}"
                                # Android Specific
                                ttl: "{{ iif(critical, 0, 3600000) }}"
                                priority: "{{ iif(critical, 'high', 'normal') }}"
                                # iOS Specific
                                push:
                                  interruption-level: "{{ iif(critical, 'critical', 'active') }}"
                                actions:
                                  - action: "{{ack_mobile}}"
                                    title: "{{dismiss}}"
                                    destructive: true
                        - if:
                            condition: template
                            value_template: "{{ not not notify_telegram }}"
                          then:
                            - service: "{{ notify_telegram }}"
                              data:
                                title: "-- Attenzione --"
                                message: "{{ message }}"
                                data:
                                  inline_keyboard:
                                  - ' 🔧 {{dismiss}}:/{{ack_mobile}}'
                        - if:
                            condition: template
                            value_template: "{{ not not media_player_google}}"
                          then:
                            - service: tts.google_translate_say
                              data:
                                message: "{{ message }}"
                                entity_id: "{{ media_player_google }}"
                        - if:
                            condition: template
                            value_template: "{{ not not media_player_alexa}}"
                          then:
                            - service: notify.alexa_media
                              data:
                                message: "{{ message }} Vuoi interrompere le notifiche?"
                                target: "{{ media_player_alexa }}"
                                data:
                                  type: announce  
                        - wait_for_trigger:
                          - platform: event
                            event_type: mobile_app_notification_action
                            event_data:
                              action: "{{ack_mobile}}"
                          - platform: event
                            event_type: telegram_callback
                            event_data:
                              data: "/{{ack_mobile}}"
                          - platform: event
                            event_type: alexa_actionable_notification
                            event_data:
                              event_id: ResponseYes

                      until: "{{  repeat.index > alert_number-1 or wait.remaining > 0 }}"
                  - sequence:
                      - delay: 
                          minutes: !input delay_finale
                      - service: input_select.select_option
                        target:
                          entity_id: "{{ status }}"
                        data:
                          option: "{{ stato1 }}"
                      - *debug-mode
